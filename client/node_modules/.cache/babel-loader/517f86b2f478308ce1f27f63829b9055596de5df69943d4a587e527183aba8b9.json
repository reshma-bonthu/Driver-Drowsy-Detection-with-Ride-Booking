{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reshm\\\\OneDrive\\\\Desktop\\\\miniproject3.2\\\\client\\\\src\\\\pages\\\\UserLogin.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./login.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserLogin = () => {\n  _s();\n  const navigate = useNavigate();\n  const [isSignUp, setIsSignUp] = useState(false);\n  const [signInData, setSignInData] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const [signUpData, setSignUpData] = useState({\n    name: \"\",\n    username: \"\",\n    email: \"\",\n    phone: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  });\n  const handleToggle = () => setIsSignUp(!isSignUp);\n  const handleSignIn = () => {\n    const {\n      username,\n      password\n    } = signInData;\n    if (username && password) {\n      fetch(\"http://localhost:5000/api/user/signin\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      }).then(async res => {\n        if (res.ok) {\n          const data = await res.json();\n          // Save token and user info to localStorage\n          localStorage.setItem(\"token\", data.token);\n          localStorage.setItem(\"user\", JSON.stringify(data.user));\n          alert(data.message);\n          setSignInData({\n            username: \"\",\n            password: \"\"\n          });\n          navigate(\"/user/view-drivers\");\n        } else {\n          const text = await res.text();\n          alert(text);\n        }\n      }).catch(() => alert(\"Server error\"));\n    } else {\n      alert(\"Please fill in all fields.\");\n    }\n  };\n  const handleSignUp = () => {\n    const {\n      name,\n      username,\n      email,\n      phone,\n      password,\n      confirmPassword\n    } = signUpData;\n    if (name && username && email && phone && password && confirmPassword) {\n      if (password === confirmPassword) {\n        fetch(\"http://localhost:5000/api/user/signup\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name,\n            username,\n            email,\n            phone,\n            password\n          })\n        }).then(async res => {\n          if (res.ok) {\n            alert(\"Sign up successful!\");\n            setIsSignUp(false);\n            setSignUpData({\n              name: \"\",\n              username: \"\",\n              email: \"\",\n              phone: \"\",\n              password: \"\",\n              confirmPassword: \"\"\n            });\n          } else {\n            const text = await res.text();\n            alert(text);\n          }\n        }).catch(() => alert(\"Server error\"));\n      } else {\n        alert(\"Passwords do not match.\");\n      }\n    } else {\n      alert(\"Please fill in all fields.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `cont ${isSignUp ? \"s--signup\" : \"\"}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(UserLogin, \"H6a2RJ2TgSJzEB9Ud0LO8C/1dnE=\", false, function () {\n  return [useNavigate];\n});\n_c = UserLogin;\nexport default UserLogin;\nvar _c;\n$RefreshReg$(_c, \"UserLogin\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","UserLogin","_s","navigate","isSignUp","setIsSignUp","signInData","setSignInData","username","password","signUpData","setSignUpData","name","email","phone","confirmPassword","handleToggle","handleSignIn","fetch","method","headers","body","JSON","stringify","then","res","ok","data","json","localStorage","setItem","token","user","alert","message","text","catch","handleSignUp","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/reshm/OneDrive/Desktop/miniproject3.2/client/src/pages/UserLogin.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./login.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst UserLogin = () => {\r\n  const navigate = useNavigate();\r\n  const [isSignUp, setIsSignUp] = useState(false);\r\n\r\n  const [signInData, setSignInData] = useState({ username: \"\", password: \"\" });\r\n  const [signUpData, setSignUpData] = useState({\r\n    name: \"\",\r\n    username: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const handleToggle = () => setIsSignUp(!isSignUp);\r\n\r\n  const handleSignIn = () => {\r\n    const { username, password } = signInData;\r\n    if (username && password) {\r\n      fetch(\"http://localhost:5000/api/user/signin\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ username, password }),\r\n      })\r\n        .then(async (res) => {\r\n          if (res.ok) {\r\n            const data = await res.json();\r\n            // Save token and user info to localStorage\r\n            localStorage.setItem(\"token\", data.token);\r\n            localStorage.setItem(\"user\", JSON.stringify(data.user));\r\n            alert(data.message);\r\n            setSignInData({ username: \"\", password: \"\" });\r\n            navigate(\"/user/view-drivers\");\r\n          } else {\r\n            const text = await res.text();\r\n            alert(text);\r\n          }\r\n        })\r\n        .catch(() => alert(\"Server error\"));\r\n    } else {\r\n      alert(\"Please fill in all fields.\");\r\n    }\r\n  };\r\n\r\n  const handleSignUp = () => {\r\n    const { name, username, email, phone, password, confirmPassword } = signUpData;\r\n    if (name && username && email && phone && password && confirmPassword) {\r\n      if (password === confirmPassword) {\r\n        fetch(\"http://localhost:5000/api/user/signup\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({ name, username, email, phone, password }),\r\n        })\r\n          .then(async (res) => {\r\n            if (res.ok) {\r\n              alert(\"Sign up successful!\");\r\n              setIsSignUp(false);\r\n              setSignUpData({\r\n                name: \"\",\r\n                username: \"\",\r\n                email: \"\",\r\n                phone: \"\",\r\n                password: \"\",\r\n                confirmPassword: \"\",\r\n              });\r\n            } else {\r\n              const text = await res.text();\r\n              alert(text);\r\n            }\r\n          })\r\n          .catch(() => alert(\"Server error\"));\r\n      } else {\r\n        alert(\"Passwords do not match.\");\r\n      }\r\n    } else {\r\n      alert(\"Please fill in all fields.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`cont ${isSignUp ? \"s--signup\" : \"\"}`}>\r\n      {/* ... sign in and sign up form remains unchanged ... */}\r\n      {/* (Keep your existing JSX structure here) */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserLogin;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,aAAa;AACpB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC;IAAEW,QAAQ,EAAE,EAAE;IAAEC,QAAQ,EAAE;EAAG,CAAC,CAAC;EAC5E,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC;IAC3Ce,IAAI,EAAE,EAAE;IACRJ,QAAQ,EAAE,EAAE;IACZK,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE,EAAE;IACTL,QAAQ,EAAE,EAAE;IACZM,eAAe,EAAE;EACnB,CAAC,CAAC;EAEF,MAAMC,YAAY,GAAGA,CAAA,KAAMX,WAAW,CAAC,CAACD,QAAQ,CAAC;EAEjD,MAAMa,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAM;MAAET,QAAQ;MAAEC;IAAS,CAAC,GAAGH,UAAU;IACzC,IAAIE,QAAQ,IAAIC,QAAQ,EAAE;MACxBS,KAAK,CAAC,uCAAuC,EAAE;QAC7CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEf,QAAQ;UAAEC;QAAS,CAAC;MAC7C,CAAC,CAAC,CACCe,IAAI,CAAC,MAAOC,GAAG,IAAK;QACnB,IAAIA,GAAG,CAACC,EAAE,EAAE;UACV,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;UAC7B;UACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;UACzCF,YAAY,CAACC,OAAO,CAAC,MAAM,EAAER,IAAI,CAACC,SAAS,CAACI,IAAI,CAACK,IAAI,CAAC,CAAC;UACvDC,KAAK,CAACN,IAAI,CAACO,OAAO,CAAC;UACnB3B,aAAa,CAAC;YAAEC,QAAQ,EAAE,EAAE;YAAEC,QAAQ,EAAE;UAAG,CAAC,CAAC;UAC7CN,QAAQ,CAAC,oBAAoB,CAAC;QAChC,CAAC,MAAM;UACL,MAAMgC,IAAI,GAAG,MAAMV,GAAG,CAACU,IAAI,CAAC,CAAC;UAC7BF,KAAK,CAACE,IAAI,CAAC;QACb;MACF,CAAC,CAAC,CACDC,KAAK,CAAC,MAAMH,KAAK,CAAC,cAAc,CAAC,CAAC;IACvC,CAAC,MAAM;MACLA,KAAK,CAAC,4BAA4B,CAAC;IACrC;EACF,CAAC;EAED,MAAMI,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAM;MAAEzB,IAAI;MAAEJ,QAAQ;MAAEK,KAAK;MAAEC,KAAK;MAAEL,QAAQ;MAAEM;IAAgB,CAAC,GAAGL,UAAU;IAC9E,IAAIE,IAAI,IAAIJ,QAAQ,IAAIK,KAAK,IAAIC,KAAK,IAAIL,QAAQ,IAAIM,eAAe,EAAE;MACrE,IAAIN,QAAQ,KAAKM,eAAe,EAAE;QAChCG,KAAK,CAAC,uCAAuC,EAAE;UAC7CC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEX,IAAI;YAAEJ,QAAQ;YAAEK,KAAK;YAAEC,KAAK;YAAEL;UAAS,CAAC;QACjE,CAAC,CAAC,CACCe,IAAI,CAAC,MAAOC,GAAG,IAAK;UACnB,IAAIA,GAAG,CAACC,EAAE,EAAE;YACVO,KAAK,CAAC,qBAAqB,CAAC;YAC5B5B,WAAW,CAAC,KAAK,CAAC;YAClBM,aAAa,CAAC;cACZC,IAAI,EAAE,EAAE;cACRJ,QAAQ,EAAE,EAAE;cACZK,KAAK,EAAE,EAAE;cACTC,KAAK,EAAE,EAAE;cACTL,QAAQ,EAAE,EAAE;cACZM,eAAe,EAAE;YACnB,CAAC,CAAC;UACJ,CAAC,MAAM;YACL,MAAMoB,IAAI,GAAG,MAAMV,GAAG,CAACU,IAAI,CAAC,CAAC;YAC7BF,KAAK,CAACE,IAAI,CAAC;UACb;QACF,CAAC,CAAC,CACDC,KAAK,CAAC,MAAMH,KAAK,CAAC,cAAc,CAAC,CAAC;MACvC,CAAC,MAAM;QACLA,KAAK,CAAC,yBAAyB,CAAC;MAClC;IACF,CAAC,MAAM;MACLA,KAAK,CAAC,4BAA4B,CAAC;IACrC;EACF,CAAC;EAED,oBACEjC,OAAA;IAAKsC,SAAS,EAAE,QAAQlC,QAAQ,GAAG,WAAW,GAAG,EAAE;EAAG;IAAAmC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGjD,CAAC;AAEV,CAAC;AAACxC,EAAA,CArFID,SAAS;EAAA,QACIH,WAAW;AAAA;AAAA6C,EAAA,GADxB1C,SAAS;AAuFf,eAAeA,SAAS;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}